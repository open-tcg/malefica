language: cpp
dist: trusty
sudo: required
env:
  global:
    - secure: CynYeLth85ueLYKaS7q6zozBLYVj/R6LOKUP86MoVLtS9Agehrkyl2/TQ3aSoCqTFlmkjAqLXJtjsqKq3xqg2lrWOPvgV35L7tJOcLeFsQdJ7nBuyf4fDGMAL9eyhApi/iODtT/28/k7biCymiEKySasA8u95/GlJ85INjqM2wvGXEejYioPTfmSBvPmv+j1IjEJ/DAt+iJKok5F27YIQ1bP4k/xr0mXcH3fWZO8vI/kZJZuGXWwLh2b60LzIHxNMza3k/cKJPjUypgI6r4DrxEYBWiEUDhuC7MfpzKEhM3uh1Gn7FX2WJPypLLe+bRaS/oxbH1m1gcIc8+UDfY/BG+Eiw6yj11hYzzsWeYelSovArOz8T7SYxTynmu7zsR14yOujZ/X3zSIbM7Sd+WAdqwZsoo8keTFPn1pL8x5DOsAGPL/7a7Cljzg2nMbS0E2lCtKveTdvWe9rrmlW1Y1jWdmlHohtUnjHhOzN8K1xQ9nVHVJ6Vu36yuci0e1GSK9gu6GRPT+9Ro3RtNIfrdtkIa+rmPZ3F1bUvVB0/Evy3OQG++hwacKDu9vUE2ddMwsuTB2MMMx22ZtKlfgiJVPuCKJNZvXmN7ygk3yt5HPrORe0+2C62eRHvbGRraaiSSsFtnqJaxeQiqfBmsWB57M9Rev+tAFJfcwvInz7m4JuOg=
matrix:
  include:
  - os: linux
    compiler: gcc
    addons: &1
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Release'
  - os: linux
    compiler: gcc
    addons: *1
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Debug' BUILD_COVERAGE=yes
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
      coverity_scan:
        project:
          name: zie87/malefica
        notification_email: tobias.zindl@googlemail.com
        build_command_prepend: cov-configure --comptype gcc --compiler gcc-7 --template
        build_command: cmake --build ./build
        branch_pattern: coverity_scan
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Debug'
  - os: linux
    compiler: clang
    addons: &2
      apt:
        sources:
        - llvm-toolchain-trusty-6.0
        - ubuntu-toolchain-r-test
        packages:
        - clang-6.0
        - libstdc++-6-dev
        - g++-7
    env: MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0" BUILD_TYPE='Release'
  - os: linux
    compiler: clang
    addons: *2
    env: MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0" BUILD_TYPE='Debug'
  - os: osx
    osx_image: xcode9.3beta
    compiler: clang
    env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE='Debug'
  - os: osx
    osx_image: xcode9.3beta
    compiler: clang
    env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE='Release'
before_install:
- eval "${MATRIX_EVAL}"
- echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN
  CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
install:
- if [[ ${TRAVIS_OS_NAME} == 'linux' ]]; then . .ci_scripts/travis.linux; fi
- if [[ ${TRAVIS_OS_NAME} == 'osx' ]]; then . .ci_scripts/travis.osx; fi
before_script:
- cd ${TRAVIS_BUILD_DIR}
- |-
  if [ -n "${BUILD_COVERAGE}" ]; then
    pip install --user pyyaml cpp-coveralls
    cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Wdev -DUSE_GCOV=ON
  else
    cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Wdev
  fi
script:
- if [[ "${COVERITY_SCAN_BRANCH}" == 1 ]]; then echo "Don't build on coverty_scan
  branch."; exit 0; fi
- |-
  if [ -n "${BUILD_COVERAGE}" ]; then
    cmake --build ./build --target coverage
  else
    cmake --build ./build
    cmake --build ./build --target test
  fi
after_success:
- if [ -n "${BUILD_COVERAGE}" ]; then 
    coveralls -b ./build -i ./include/malefica;
    lcov --directory . --capture --output-file coverage.info
    lcov --remove coverage.info '/usr/*' --output-file coverage.info
    lcov --remove coverage.info "${PWD}/3rd/*" --output-file coverage.info
    lcov --remove coverage.info "${PWD}/src/tests/*" --output-file coverage.info
    bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  fi
