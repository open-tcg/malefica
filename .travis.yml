language: cpp
dist: trusty
sudo: required

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Sjn+vqTfDHfwk9/RHDnTFlxsldUnz8hRdWKibPKxZLpXBsy01LV18to8kEH/JlsVUw7s7EbKPXjRPVFqbt1VAwbvhaspcCNkYPm8WSJA4ILdMrWHHHLu0+kquCh1oZeUWiKcWGGiic0C3CgulqUPmuOh+/h29WOIJFkD8ay7iV/p6ewcNqEA/0DtmZhlZG9wFAgUf2fAmG4MUSf8UJk/pKuDskMl0g/ZWGzF73aY5TzXN2mDl/pBQBmYmXWTKD0Dmg2H/idr80kceX0vb4AtOnOthyj/sdw+4FPMqC6hlu51P+E85QH1xU7OKOeQit7IfQrHY3B0uugTQ/MbTZGxCXg/go4bm5nRypVVez1or6A4RSCv0eZDbcd0xr7CRzCxEp7dXvuVQ+ymuFu+9sPL6cf7lXWTe7tqL+v/m9kLDhKWOBLDOTif+QQ7HTCL2yc8ThBr4OqkQjmBbSehLC3AXmam+EfBsMuIO2Ss13+U4QnWd52Y/goNBg51zeJkOll2u6TjgqAjWWtOtOjgLXCTdIgXzYOeT4SVuEcToShtx+hxp/owf9zss7afWqU3+jjGbGmaRRVgcmeZCLCyWfc4HeHWIegf5gUtyCR5L0W2cT+WElA+xylR3r7NFuLBZzVj94lrU3R+UgQN+o5CU6AMOLKX3P8A0n8QRs0cpao9tMU="


matrix:
  include:
  - os: linux
    compiler: gcc
    addons: &gcc7
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7']
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Release'
  
  - os: linux
    compiler: gcc
    addons: *gcc7
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Debug' BUILD_COVERAGE=yes
  
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7']
      coverity_scan:
        project:
          name: "zie87/malefica"
        notification_email: tobias.zindl@googlemail.com
        build_command_prepend: "cov-configure --comptype gcc --compiler gcc-7 --template"
        build_command: "cmake --build ./build"
        branch_pattern: coverity_scan
    env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE='Debug'

  - os: linux
    compiler: clang
    addons: &clang6
      apt:
        sources: ['llvm-toolchain-trusty-6.0', 'ubuntu-toolchain-r-test']
        packages: ['clang-6.0', 'libstdc++-6-dev', g++-7]
    env: MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0" BUILD_TYPE='Release'
  
  - os: linux
    compiler: clang
    addons: *clang6
    env: MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0" BUILD_TYPE='Debug'

  - os: osx
    osx_image: xcode9.3beta
    compiler: clang
    env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE='Debug'
  
  - os: osx
    osx_image: xcode9.3beta
    compiler: clang
    env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE='Release'

before_install:
  - eval "${MATRIX_EVAL}"
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

install:
  - if [[ ${TRAVIS_OS_NAME} == 'linux' ]]; then . .ci_scripts/travis.linux; fi
  - if [[ ${TRAVIS_OS_NAME} == 'osx' ]]; then . .ci_scripts/travis.osx; fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - |-
    if [ -n "${BUILD_COVERAGE}" ]; then
      pip install --user pyyaml cpp-coveralls
      cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Wdev -DUSE_GCOV=ON
    else
      cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Wdev
    fi

script:
  - if [[ "${COVERITY_SCAN_BRANCH}" == 1 ]];
    then
      echo "Don't build on coverty_scan branch.";
      exit 0;
    fi
  - |-
    if [ -n "${BUILD_COVERAGE}" ]; then
      cmake --build ./build --target coverage
    else
      cmake --build ./build
      cmake --build ./build --target test
    fi

after_success:
  - if [ -n "${BUILD_COVERAGE}" ]; then coveralls -b ./build -i ./include/malefica; fi